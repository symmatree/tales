name: Static Validation
on:
  pull_request: {}
  workflow_dispatch: {}
jobs:
  static-validate:
    name: Static Validation
    runs-on: ubuntu-latest
    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - name: Tool cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/bin
          # Use date so we refetch once a day no matter what.
          key: ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('ci-tools/install-tools.sh') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-tools-
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ">=3.11"
      - name: Install tools
        run: |
          set -euo pipefail
          export TOOLDIR="${{ runner.temp }}/bin"
          export GET_EGET="$GITHUB_WORKSPACE/ci-tools/eget.sh"
          "$GITHUB_WORKSPACE/ci-tools/install-tools.sh"
      - name: Find modules
        id: modules
        run: |
          set -euo pipefail
          # Locate Helm and Tanka configs for validation
          mapfile -t charts< <(find "${{ github.workspace }}" -name Chart.yaml -exec dirname {} \;)
          echo "CHARTS=${charts[*]}" | tee -a "$GITHUB_OUTPUT"
          mapfile -t tanka< <(find "${{ github.workspace }}" -name jsonnetfile.json -exec dirname {} \;)
          echo "TANKA=${tanka[*]}" | tee -a "$GITHUB_OUTPUT"

          # Cache vendor directories
          for c in "${!charts[@]}"; do
              charts[c]="${charts[c]}/charts"
          done
          for c in "${!tanka[@]}"; do
              tanka[c]="${tanka[c]}/vendor"
          done
          echo "CACHE_DIRS<<EOF" | tee -a "$GITHUB_OUTPUT"
          cache_dirs=("${charts[@]}" "${tanka[@]}")
          for dir in "${cache_dirs[@]}"; do
            echo "$dir" | tee -a "$GITHUB_OUTPUT"
            mkdir -p "$dir"
          done
          echo "EOF" | tee -a "$GITHUB_OUTPUT"
      - name: Kubeconform schema cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/cache/kubeconform
          # Use timestamp so we always push back (if changed)
          key: ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.TIMESTAMP }}
          restore-keys: |
            ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.DATESTAMP }}
            ${{ runner.os }}-kubeconform-
      - name: Deps cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.modules.outputs.CACHE_DIRS }}
          key: ${{ runner.os }}-deps-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('**/Chart.lock', '**/jsonnetfile.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-deps-
      - name: Check Tanka
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          for dir in ${{ steps.modules.outputs.TANKA }}; do
            echo "$dir"
            pushd "$dir"
            if [[ "${{ steps.deps-cache.outputs.cache-hit }}" != "true" ]]; then
              jb update
            fi
            tk show --dangerous-allow-redirect \
              environments/default  \
              | ${{ github.workspace }}/ci-tools/kubeconform.sh
            popd > /dev/null
            echo "end $dir"
          done
      - name: Check Helm charts
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          if [[ "${{ steps.deps-cache.outputs.cache-hit }}" != "true" ]]; then
            ${{ github.workspace }}/ci-tools/helm-add-repos.sh
            helm repo update
          fi
          for chart in ${{ steps.modules.outputs.CHARTS }}; do
            echo "$chart"
            pushd "$chart"
            if [[ "${{ steps.deps-cache.outputs.cache-hit }}" != "true" ]]; then
              helm dep build --skip-refresh
            fi
            helm lint .
            ${{ github.workspace }}/ci-tools/helm.sh template --dry-run=client . \
              | ${{ github.workspace }}/ci-tools/kubeconform.sh
            popd > /dev/null
            echo "end $chart"
          done
      # If we get this far, connect and validate.
      - uses: azure/setup-kubectl@v4
        with:
          # Directly interpolated into download URL, so no fanciness.
          # Explicit to avoid resolving "latest" every time.
          version: "v1.33.2"
        id: install

      - name: Wireguard
        id: wireguard
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.WIREGUARD_CONF }}" ]; then
            echo "No Wireguard config provided"
            exit 1
          fi
          echo "Setting up Wireguard..."
          time sudo apt-get -y \
           -qq -o Dpkg::Progress-Fancy="0" -o APT::Color="0" -o Dpkg::Use-Pty="0" \
            install wireguard-tools
          echo "${{ secrets.WIREGUARD_CONF }}" > "$HOME/wg0.conf"
          chmod 0600 "$HOME/wg0.conf"
          echo "Connecting..."
          time sudo wg-quick up "$HOME/wg0.conf"
          echo "Connected"
          echo "WIREGUARD=1" | tee -a "$GITHUB_OUTPUT"

      - name: Get kubeconfig
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.KUBECONFIG }}" ]; then
            echo "No KUBECONFIG provided"
            exit 1
          fi
          mkdir -p "$HOME/.kube"
          chmod 0700 "$HOME/.kube"
          echo "${{ secrets.KUBECONFIG }}" > "$HOME/.kube/config"
          chmod 0600 "$HOME/.kube/config"

      - name: Diff Helm against cluster
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          for chart in ${{ steps.modules.outputs.CHARTS }}; do
            NAMESPACE=$(basename "$chart")
            echo "Namespace: ${NAMESPACE} (${chart})"
            pushd "$chart"
            DIFFS=$(../ci-tools/helm.sh template --is-upgrade --no-hooks --skip-crds "$NAMESPACE" -n "$NAMESPACE" . \
             | kubectl diff -n "${NAMESPACE}" --server-side=true -f - --force-conflicts=true) || true
            popd > /dev/null
            if [ -n "$DIFFS" ]; then
              echo "::notice file=${chart},title=${NAMESPACE}-Diffs::${DIFFS}"
              # echo "::group::Diffs for $NAMESPACE"
              # echo "Differences found in $chart:"
              # echo "$DIFFS"
              # echo "::endgroup::"
            else
              echo "No differences found in $chart."
            fi
            echo "end $chart"
          done

      - name: Diff Tanka against cluster
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          for dir in ${{ steps.modules.outputs.TANKA }}; do
            echo "$dir"
            pushd "$dir"
            NAMESPACE=$(basename "$dir")
            echo "Namespace: ${NAMESPACE} (${dir})"
            DIFFS=$(tk show --dangerous-allow-redirect \
              environments/default  \
              | kubectl diff -n "${NAMESPACE}" --server-side=true -f - --force-conflicts=true) || true
            popd > /dev/null
            if [ -n "$DIFFS" ]; then
              echo "::notice file=${dir},title=${NAMESPACE}-Diffs::${DIFFS}"
              #echo "Differences found in $dir:"
              #echo "$DIFFS"
              # echo "::endgroup::"
            else
              echo "No differences found in $dir."
            fi
            echo "end $dir"
          done

      - name: De-wireguard
        if: always()
        run: |
          set -euo pipefail
          if [ -z "${{ steps.wireguard.outputs.WIREGUARD }}" ]; then
            echo "No Wireguard connection established, skipping disconnection."
            exit 0
          fi
          echo "Disconnecting Wireguard..."
          time sudo wg-quick down "$HOME/wg0.conf"
          echo "Disconnected"
      - uses: pre-commit-ci/lite-action@v1.1.0
        if: always()
