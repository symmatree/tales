name: Static Validation
on:
  # This is cheap enough, just run it.
  push: {}
  # pull_request: {}
  workflow_dispatch: {}
jobs:
  static-validate:
    name: Static Validation
    runs-on: ubuntu-latest
    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - name: Tool cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/bin
          key: ${{ runner.os }}-tools-${{ hashFiles('ci-tools/install-tools.sh') }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ">=3.11"
      - uses: pre-commit/action@v3.0.1
      - name: Install tools
        run: |
          set -euo pipefail
          export TOOLDIR="${{ runner.temp }}/bin"
          export GET_EGET="$GITHUB_WORKSPACE/ci-tools/eget.sh"
          "$GITHUB_WORKSPACE/ci-tools/install-tools.sh"
      - name: Find modules
        id: modules
        run: |
          set -euo pipefail
          # Locate Helm and Tanka configs for validation
          mapfile -t charts< <(find "${{ github.workspace }}" -name Chart.yaml -exec dirname {} \;)
          echo "CHARTS=${charts[*]}" | tee -a "$GITHUB_OUTPUT"
          mapfile -t tanka< <(find "${{ github.workspace }}" -name jsonnetfile.json -exec dirname {} \;)
          echo "TANKA=${tanka[*]}" | tee -a "$GITHUB_OUTPUT"

          # Cache vendor directories
          for c in "${!charts[@]}"; do
              charts[c]="${charts[c]}/charts"
          done
          for c in "${!tanka[@]}"; do
              tanka[c]="${tanka[c]}/vendor"
          done
          echo "CACHE_DIRS<<EOF" | tee -a "$GITHUB_OUTPUT"
          cache_dirs=("${charts[@]}" "${tanka[@]}")
          for dir in "${cache_dirs[@]}"; do
            echo "$dir" | tee -a "$GITHUB_OUTPUT"
            mkdir -p "$dir"
          done
          echo "EOF" | tee -a "$GITHUB_OUTPUT"
      - name: Kubeconform schema cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/cache/kubeconform
          key: ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.TIMESTAMP }}
          restore-keys: |
            ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.DATESTAMP }}
            ${{ runner.os }}-kubeconform-
      - name: Deps cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.modules.outputs.CACHE_DIRS }}
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Chart.lock', '**/jsonnetfile.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      - name: Check Tanka
        run: |
          set -euxo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          for dir in ${{ steps.modules.outputs.TANKA }}; do
            pushd "$dir"
            jb update
            tk show --dangerous-allow-redirect \
              environments/default  \
              | ${{ github.workspace }}/ci-tools/kubeconform.sh
            popd
          done
      - name: Check Helm charts
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          ${{ github.workspace }}/ci-tools/helm-add-repos.sh
          for chart in ${{ steps.modules.outputs.CHARTS }}; do
            echo "Checking chart: $chart"
            pushd "$chart"
            helm dep build --skip-refresh
            helm lint .
            ${{ github.workspace }}/ci-tools/helm.sh template --dry-run=client . \
              | ${{ github.workspace }}/ci-tools/kubeconform.sh
            popd
          done
      - uses: pre-commit-ci/lite-action@v1.1.0
        if: always()
