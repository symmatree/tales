name: Static Validation
on:
  pull_request: {}
  workflow_dispatch: {}
  push:
    branches:
      - main # Run post-commit to validate, also to update caches.
  schedule:
    - cron: "0 1 * * *" # Daily at 0100 UTC
jobs:
  static-validate:
    name: Static Validation
    runs-on: ubuntu-latest
    steps:
      - name: DateAndTimeStamps
        id: stamps
        run: |
          set -euo pipefail
          timestamp=$(date +'%Y%m%dT%H%M%S')
          datestamp=$(date +'%Y%m%d')
          echo "TIMESTAMP=${timestamp}" | tee -a "$GITHUB_OUTPUT"
          echo "DATESTAMP=${datestamp}" | tee -a "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - name: Tool cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/bin
          # Use date so we refetch once a day no matter what.
          key: ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('ci-tools/install-tools.sh') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-tools-
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ">=3.11"
      - name: Install tools
        run: |
          set -euo pipefail
          export TOOLDIR="${{ runner.temp }}/bin"
          export GET_EGET="$GITHUB_WORKSPACE/ci-tools/eget.sh"
          "$GITHUB_WORKSPACE/ci-tools/install-tools.sh"
      - uses: pre-commit/action@v3.0.1
        name: pre-commit
        with:
          # Diff on failure is a default arg.
          extra_args: "--all-files"
      - name: Find modules
        id: modules
        run: |
          set -euo pipefail
          # Locate Helm and Tanka configs for validation
          cd "${{ github.workspace }}"
          mapfile -t CHARTS < <(find "$(pwd)" -name vendor -prune -o -name Chart.yaml -exec dirname "{}" \;)
          echo "CHARTS=${CHARTS[*]}" | tee -a "$GITHUB_OUTPUT"
          mapfile -t TANKA < <(find "$(pwd)" -name vendor -prune -o -name jsonnetfile.json -exec dirname "{}" \;)
          echo "TANKA=${TANKA[*]}" | tee -a "$GITHUB_OUTPUT"

          # Cache vendor directories
          for c in "${!CHARTS[@]}"; do
              CHARTS[c]="${CHARTS[c]}/charts"
          done
          for c in "${!TANKA[@]}"; do
              TANKA[c]="${TANKA[c]}/vendor"
          done
          echo "CACHE_DIRS<<EOF" | tee -a "$GITHUB_OUTPUT"
          cache_dirs=("${CHARTS[@]}" "${TANKA[@]}")
          for dir in "${cache_dirs[@]}"; do
            echo "$dir" | tee -a "$GITHUB_OUTPUT"
            mkdir -p "$dir"
          done
          echo "EOF" | tee -a "$GITHUB_OUTPUT"
      - name: Kubeconform schema cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/cache/kubeconform
          # Use timestamp so we always push back (if changed)
          key: ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.TIMESTAMP }}
          restore-keys: |
            ${{ runner.os }}-kubeconform-${{ steps.stamps.outputs.DATESTAMP }}
            ${{ runner.os }}-kubeconform-
      - name: Deps cache
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.modules.outputs.CACHE_DIRS }}
          key: ${{ runner.os }}-deps-${{ steps.stamps.outputs.DATESTAMP }}-${{ hashFiles('**/Chart.lock', '**/jsonnetfile.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ steps.stamps.outputs.DATESTAMP }}-
            ${{ runner.os }}-deps-
      - name: Check Tanka
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          if [[ "${{ steps.deps-cache.outputs.cache-hit }}" != "true" ]]; then
            export UPDATE=1
          fi
          ./ci-tools/check-tanka.sh ${{ steps.modules.outputs.TANKA }}
      - name: Check Helm charts
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          mkdir -p "${{ runner.temp }}/cache/kubeconform"
          if [[ "${{ steps.deps-cache.outputs.cache-hit }}" != "true" ]]; then
            export UPDATE=1
          fi
          ./ci-tools/check-helm.sh ${{ steps.modules.outputs.CHARTS }}
      # If we get this far, connect and validate.
      - uses: azure/setup-kubectl@v4
        with:
          # Directly interpolated into download URL, so no fanciness.
          # Explicit to avoid resolving "latest" every time.
          version: "v1.33.2"
        id: install

      - name: Wireguard
        id: wireguard
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.WIREGUARD_CONF }}" ]; then
            echo "No Wireguard config provided"
            exit 1
          fi
          echo "Setting up Wireguard..."
          time sudo apt-get -y \
           -qq -o Dpkg::Progress-Fancy="0" -o APT::Color="0" -o Dpkg::Use-Pty="0" \
            install wireguard-tools
          echo "${{ secrets.WIREGUARD_CONF }}" > "$HOME/wg0.conf"
          chmod 0600 "$HOME/wg0.conf"
          echo "Connecting..."
          time sudo wg-quick up "$HOME/wg0.conf"
          echo "Connected"
          echo "WIREGUARD=1" | tee -a "$GITHUB_OUTPUT"

      - name: Get kubeconfig
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.KUBECONFIG }}" ]; then
            echo "No KUBECONFIG provided"
            exit 1
          fi
          mkdir -p "$HOME/.kube"
          chmod 0700 "$HOME/.kube"
          echo "${{ secrets.KUBECONFIG }}" > "$HOME/.kube/config"
          chmod 0600 "$HOME/.kube/config"

      - name: Diff Helm against cluster
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          ./ci-tools/diff-helm.sh ${{ steps.modules.outputs.CHARTS }}

      - name: Diff Tanka against cluster
        run: |
          set -euo pipefail
          export PATH="${{ runner.temp }}/bin:$PATH"
          ./ci-tools/diff-tanka.sh ${{ steps.modules.outputs.TANKA }}

      - name: De-wireguard
        if: always()
        run: |
          set -euo pipefail
          if [ -z "${{ steps.wireguard.outputs.WIREGUARD }}" ]; then
            echo "No Wireguard connection established, skipping disconnection."
            exit 0
          fi
          echo "Disconnecting Wireguard..."
          time sudo wg-quick down "$HOME/wg0.conf"
          echo "Disconnected"
      - uses: pre-commit-ci/lite-action@v1.1.0
        if: always()
