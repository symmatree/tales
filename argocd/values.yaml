# https://raw.githubusercontent.com/argoproj/argo-helm/refs/tags/argo-cd-7.8.23/charts/argo-cd/Chart.yaml
# then deleted values we do not override.

argo-cd:
  ## Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd
  ##
  # -- Create aggregated roles that extend existing cluster roles to interact with argo-cd resources
  ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
  createAggregateRoles: false
  # -- Create cluster roles for cluster-wide installation.
  ## Used when you manage applications in the same cluster where Argo CD runs
  createClusterRoles: true

  ## Custom resource configuration
  crds:
    # -- Keep CRDs on chart uninstall
    keep: false

  ## Globally shared configuration
  global:
    # -- Default domain used by all components
    ## Used for ingresses, certificates, SSO, notifications, etc.
    domain: argocd.local.symmatree.com

  ## Argo Configs
  configs:
    # General Argo CD configuration. Any values you put under `.configs.cm` are passed to argocd-cm ConfigMap.
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      # -- Create the argocd-cm configmap for [declarative setup]
      create: true
      # -- Enable exec feature in Argo UI
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
      exec.enabled: true

      # -- Enable local admin user
      ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
      admin.enabled: true
      # -- Enable Status Badge
      ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/
      statusbadge.enabled: true

    # Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    params:
      ## Generic parameters
      # -- Open-Telemetry collector address: (e.g. "otel-collector:4317")
      otlp.address: ""
      server.insecure: true

    # ConfigMap for Config Management Plugins
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
    cmp:
      # -- Create the argocd-cmp-cm configmap
      create: true

      # -- Annotations to be added to argocd-cmp-cm configmap
      annotations: {}

      # -- Plugin yaml files to be added to argocd-cmp-cm
      plugins:
        {}
        # --- First plugin
        # my-plugin:
        #   init:
        #     command: [sh]
        #     args: [-c, 'echo "Initializing..."']
        #   generate:
        #     command: [sh, -c]
        #     args:
        #       - |
        #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
        #   discover:
        #     fileName: "./subdir/s*.yaml"
        #     find:
        #       glob: "**/Chart.yaml"
        #       command: [sh, -c, find . -name env.yaml]

        # --- Second plugin
        # my-plugin2:
        #   init:
        #     command: [sh]
        #     args: [-c, 'echo "Initializing..."']
        #   generate:
        #     command: [sh, -c]
        #     args:
        #       - |
        #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
        #   discover:
        #     fileName: "./subdir/s*.yaml"
        #     find:
        #       glob: "**/Chart.yaml"
        #       command: [sh, -c, find . -name env.yaml]

    # -- Repositories list to be used by applications
    ## Creates a secret for each key/value specified below to create repositories
    ## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
    repositories:
      {}
      # istio-helm-repo:
      #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
      #   name: istio.io
      #   type: helm
      # private-helm-repo:
      #   url: https://my-private-chart-repo.internal
      #   name: private-repo
      #   type: helm
      #   password: my-password
      #   username: my-username
      # private-repo:
      #   url: https://github.com/argoproj/private-repo

    # -- Annotations to be added to `configs.repositories` Secret
    repositoriesAnnotations: {}

  ## Application controller
  controller:
    ## Application controller metrics configuration
    metrics:
      # -- Deploy metrics service
      enabled: true
      applicationLabels:
        # -- Enables additional labels in argocd_app_labels metric
        enabled: false
        # -- Additional labels
        labels: []
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true

  ## Dex
  dex:
    # -- Enable dex
    enabled: true
    # -- Dex name
    name: dex-server

    # -- Additional command line arguments to pass to the Dex server
    extraArgs: []

    # -- Runtime class name for Dex
    # @default -- `""` (defaults to global.runtimeClassName)
    runtimeClassName: ""

    metrics:
      # -- Deploy metrics service
      enabled: true
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true

  ## Server
  server:
    ## Server metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
    # Argo CD server ingress configuration
    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Specific implementation for ingress controller. One of `generic`, `aws` or `gke`
      ## Additional configuration might be required in related configuration sections
      controller: generic
      annotations:
        cert-manager.io/cluster-issuer: real-cert
      ingressClassName: "cilium"

      # -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
      ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
      ## You can create this secret via `certificate` or `certificateSecret` option
      tls: true

    # Dedicated gRPC ingress for ingress controllers that supports only single backend protocol per Ingress resource
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts
    ingressGrpc:
      # -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: real-cert
      ingressClassName: "cilium"
      hostname: "grpc-argocd.local.symmatree.com"
      tls: true

  ## Notifications controller
  notifications:
    # -- Enable notifications controller
    enabled: true

    secret:
      # -- notifications controller Secret name
      name: "argocd-notifications-secret"

      # -- Generic key:value pairs to be inserted into the secret
      ## Can be used for templates, notification services etc. Some examples given below.
      ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
      items:
        {}
        # slack-token:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/

        # grafana-apiKey:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/

        # webhooks-github-token:

        # email-username:
        # email-password:
        # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/
